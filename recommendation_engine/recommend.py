# Import th∆∞ vi·ªán k·∫øt n·ªëi MySQL v√† x·ª≠ l√Ω d·ªØ li·ªáu
import pymysql
import pandas as pd
from sklearn.neighbors import NearestNeighbors

# ‚öôÔ∏è K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu MySQL
conn = pymysql.connect(
    host='localhost',
    user='root',
    password='123456',
    db='nodejsapi'
)

# üü© 1. L·∫•y d·ªØ li·ªáu th·ªÉ lo·∫°i phim m√† m·ªói ng∆∞·ªùi d√πng ƒë√£ t·ª´ng xem (bi·∫øn th√†nh vector ƒë·∫∑c tr∆∞ng)
def load_user_genres():
    # C√¢u SQL l·∫•y m√£ ng∆∞·ªùi d√πng v√† th·ªÉ lo·∫°i phim ƒë√£ ƒë·∫∑t v√©
    query = """
    SELECT d.taiKhoanNguoiDat AS user_id, p.maTheLoaiPhim
    FROM datve d
    JOIN lichchieuinsert l ON d.maLichChieu = l.maLichChieu
    JOIN phiminsertvalichchieuinsert pl ON pl.lichchieuinsert = l.maLichChieu
    JOIN phiminsert p ON p.maPhim = pl.phiminsert
    """
    df = pd.read_sql(query, conn)

    # √Ånh x·∫° m√£ th·ªÉ lo·∫°i th√†nh t√™n th·ªÉ lo·∫°i d·ªÖ ƒë·ªçc
    genre_map = {
        1: 'kinh_di',
        2: 'hoat_hinh',
        3: 'hanh_dong',
        4: 'vien_tuong',
        5: 'sieu_anh_hung',
        6: 'ngon_tinh'
    }

    df['genre_name'] = df['maTheLoaiPhim'].map(genre_map)

    # T·∫°o b·∫£ng pivot: m·ªói d√≤ng l√† 1 user, m·ªói c·ªôt l√† s·ªë l·∫ßn xem t·ª´ng th·ªÉ lo·∫°i
    pivot = pd.pivot_table(df, index='user_id', columns='genre_name', aggfunc=len, fill_value=0)
    pivot.columns.name = None
    pivot = pivot.reset_index()

    return pivot

# üü© 2. L·∫•y d·ªØ li·ªáu user ƒë√£ xem phim n√†o
def load_user_movie():
    query = """
    SELECT d.taiKhoanNguoiDat AS user_id, p.maPhim AS movie_id
    FROM datve d
    JOIN lichchieuinsert l ON d.maLichChieu = l.maLichChieu
    JOIN phiminsertvalichchieuinsert pl ON pl.lichchieuinsert = l.maLichChieu
    JOIN phiminsert p ON p.maPhim = pl.phiminsert
    """
    return pd.read_sql(query, conn)

# üß† H√†m ch√≠nh: G·ª£i √Ω phim d·ª±a tr√™n KNN
def recommend_movies(user_id):
    # L·∫•y d·ªØ li·ªáu vector th·ªÉ lo·∫°i v√† l·ªãch s·ª≠ xem phim
    user_genres_df = load_user_genres()
    watch_data = load_user_movie()

    user_ids = user_genres_df['user_id'].tolist()

    # N·∫øu user ch∆∞a c√≥ d·ªØ li·ªáu xem phim ‚Üí tr·∫£ danh s√°ch g·ª£i √Ω m·∫∑c ƒë·ªãnh
    if user_id not in user_ids:
        return get_default_recommendations()

    # Lo·∫°i b·ªè c·ªôt user_id ƒë·ªÉ ch·ªâ gi·ªØ vector ƒë·∫∑c tr∆∞ng
    X = user_genres_df.drop(columns=['user_id']).values

    # T·∫°o m√¥ h√¨nh KNN v·ªõi ƒë·ªô ƒëo kho·∫£ng c√°ch cosine
    model = NearestNeighbors(n_neighbors=3, metric='cosine')
    model.fit(X)

    # T√¨m c√°c user g·∫ßn nh·∫•t v·ªõi user hi·ªán t·∫°i
    idx = user_ids.index(user_id)
    distances, indices = model.kneighbors([X[idx]])
    similar_users = [user_ids[i] for i in indices.flatten() if user_ids[i] != user_id]

    # T·∫≠p h·ª£p c√°c phim m√† user hi·ªán t·∫°i ƒë√£ xem
    watched_by_target = set(watch_data[watch_data['user_id'] == user_id]['movie_id'])

    recommendations = set()

    # Duy·ªát qua user t∆∞∆°ng ƒë·ªìng v√† l·∫•y c√°c phim h·ªç ƒë√£ xem
    for sim_user in similar_users:
        sim_movies = watch_data[watch_data['user_id'] == sim_user]['movie_id']
        recommendations.update(sim_movies)

    # Lo·∫°i b·ªè nh·ªØng phim user hi·ªán t·∫°i ƒë√£ xem, gi·ªØ t·ªëi ƒëa 6 phim
    return sorted(list(recommendations - watched_by_target))[:6]

# üü° H√†m g·ª£i √Ω m·∫∑c ƒë·ªãnh n·∫øu user ch∆∞a c√≥ d·ªØ li·ªáu
def get_default_recommendations():
    query = """
    SELECT maPhim FROM phiminsert ORDER BY ngayKhoiChieu DESC LIMIT 6
    """
    df = pd.read_sql(query, conn)
    return df['maPhim'].tolist()

